version: '3.8'

services:
  # Transaction Ingestion Service
  transaction-ingestion-service:
    build:
      context: ../transaction-ingestion-service
      dockerfile: Dockerfile
    container_name: transaction-ingestion-service
    ports:
      - "8083:8080"
    environment:
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SPRING_KAFKA_PRODUCER_PROPERTIES_SCHEMA_REGISTRY_URL=http://schema-registry:8081
    depends_on:
      - kafka
      - schema-registry
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - fraud-detection-network

  # Transaction Enrichment Service
  transaction-enrichment-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: transaction-enrichment-service
    ports:
      - "8082:8081"
    environment:
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SPRING_KAFKA_CONSUMER_PROPERTIES_SCHEMA_REGISTRY_URL=http://schema-registry:8081
      - SPRING_KAFKA_PRODUCER_PROPERTIES_SCHEMA_REGISTRY_URL=http://schema-registry:8081
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/customer_data
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_CACHE_TYPE=none
      - SPRING_DATA_REDIS_REPOSITORIES_ENABLED=false
      - RISK_SERVICE_URL=http://risk-scoring-service:8085/api/risk
    depends_on:
      - kafka
      - schema-registry
      - postgres
      - redis
      - risk-scoring-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - fraud-detection-network

  # Risk Scoring Service (Mock)
  risk-scoring-service:
    image: python:3.9-alpine
    container_name: risk-scoring-service
    command: sh -c "pip install flask && python /app/risk_service.py"
    ports:
      - "8085:8085"
    volumes:
      - ./risk-service:/app
    networks:
      - fraud-detection-network

  # Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - fraud-detection-network

  kafka:
    image: confluentinc/cp-kafka:7.5.1
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_MESSAGE_MAX_BYTES: 1048576000  # Set to ~1GB
      KAFKA_REPLICA_FETCH_MAX_BYTES: 1048576000
      KAFKA_FETCH_MESSAGE_MAX_BYTES: 1048576000
    networks:
      - fraud-detection-network

  schema-registry:
    image: confluentinc/cp-schema-registry:7.5.1
    container_name: schema-registry
    depends_on:
      - kafka
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka:9092
    networks:
      - fraud-detection-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://schema-registry:8081
    depends_on:
      - kafka
      - schema-registry
    networks:
      - fraud-detection-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: customer_data
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - fraud-detection-network

  # Redis for Caching
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    networks:
      - fraud-detection-network

  # Grafana for Monitoring
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - fraud-detection-network

  # Prometheus for Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - fraud-detection-network

volumes:
  postgres-data:
  redis-data:
  grafana-data:
  prometheus-data:

networks:
  fraud-detection-network:
    driver: bridge